import type { Comparison } from "Compare"
import type { Maybe } from "Maybe"

import type { DistanceConfig } from "CopyEdit"

import { EQ, GT, LT } from "Compare"
import Dict from "Dictionary"
import Float from "Float"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import Set from "Set"
import { join, toLower } from "String"
import Tuple from "Tuple"

import { DEFAULT_CONFIG, distanceDict, nearestAllWithConfig, nearestWithConfig } from "CopyEdit"



lower = map(toLower)

export type Tag = Tag(List String)
instance Comparable Tag {
  compare = compareTag
}

create :: List String -> Tag
export create = Tag

many :: List (List String) -> List Tag
export many = map(create)


// INTRINSICS

compareTag :: Tag -> Tag -> Comparison
export compareTag = (a, b) => where(#[a, b]) {
  #[Tag(_), Tag(_)] =>
    do {
      aff = affinity(a, b)
      return if (aff == 1) {
        EQ
      } else if (aff == 0) {
        LT
      } else do {
        lenA = length(a)
        lenB = length(b)
        return lenA < lenB ? LT : GT
      }
    }
}

// FIELDS

scopes :: Tag -> List String
export scopes = where {
  Tag(x) =>
    x
}

_enscope :: (List String -> a) -> Tag -> a
export _enscope = (fn, x) => pipe(
  scopes,
  fn,
)(x)

render :: Tag -> String
export render = _enscope(join(":"))

length :: Tag -> Integer
export length = _enscope(List.length)

root :: Tag -> Maybe String
export root = _enscope(List.first)

focus :: Tag -> Maybe String
export focus = _enscope(List.last)

scopeAt :: Integer -> Tag -> Maybe String
export scopeAt = (i, t) => _enscope(List.nth(i))(t)

// DERIVATIONS

isBand :: Tag -> Boolean
export isBand = pipe(
  scopes,
  List.length,
  (x) => x == 1,
)

isRootSibling :: Tag -> Tag -> Boolean
export isRootSibling = (a, b) => root(a) == root(b)

isRelative :: Tag -> Tag -> Boolean
export isRelative = (_a, _b) => where(#[_a, _b]) {
  #[Tag(a), Tag(b)] =>
    pipe(
      List.zip(a),
      List.any(where { #[k, v] => k == v }),
    )(b)
}

overlap :: Tag -> Tag -> List String
export overlap = (a, b) => where(#[a, b]) {
  #[Tag(xs), Tag(ys)] =>
    List.reduce(
      (agg, y) => List.includes(toLower(y), lower(xs)) ? List.concat(agg, [y]) : agg,
      [],
      lower(ys),
    )
}

affinity :: Tag -> Tag -> Float
export affinity = (_a, _b) => {
  dA = length(_a)
  dB = length(_b)
  d = dA > dB ? dA : dB
  n = pipe(
    overlap(_a),
    List.length,
  )(_b)
  return n / d
}


equals :: Tag -> Tag -> Boolean
export equals = (_a, _b) => affinity(_a, _b) == 1

_flatLookupTableWithConfig :: DistanceConfig
  -> String
  -> List Tag
  -> List #[Tag, #[Byte, List String]]
export _flatLookupTableWithConfig = (conf, str, tags) => pipe(
  chain(
    (t) => pipe(
      scopes,
      distanceDict(conf, str),
      Dict.toList,
      map(where { #[dist, stack] => #[t, #[dist, stack]] }),
    )(t),
  ),
)(tags)

_lastString = pipe(
  List.last,
  fromMaybe(""),
)

lookupTableWithConfigAndBase :: Dictionary Byte (List #[Tag, String])
  -> DistanceConfig
  -> String
  -> List Tag
  -> Dictionary Byte (List #[Tag, String])
export lookupTableWithConfigAndBase = (base, conf, str, tags) => pipe(
  _flatLookupTableWithConfig(conf, str),
  List.reduce(
    (agg, step) => where(step) {
      #[tag, #[dist, stack]] =>
        do {
          toAdd = [#[tag, _lastString(stack)]]
          return Dict.includes(dist, agg)
            ? Dict.update(List.concat(toAdd), dist, agg)
            : Dict.insert(dist, toAdd, agg)
        }
    },
    base,
  ),
)(tags)
export lookupTableWithConfig = lookupTableWithConfigAndBase(Dict.empty)
export lookupTable = lookupTableWithConfig(DEFAULT_CONFIG)

fuzzyLookup :: Dictionary a (List #[Tag, b]) -> List Tag
export fuzzyLookup = pipe(
  Dict.values,
  List.flatten,
  map(Tuple.fst),
  List.uniqueBy(equals),
  List.sortBy(compareTag),
)

fuzzyWithConfig :: DistanceConfig -> String -> List Tag -> List Tag
export fuzzyWithConfig = (conf, str, tags) => pipe(
  lookupTableWithConfig(conf, str),
  fuzzyLookup,
)(tags)

export fuzzy = fuzzyWithConfig(DEFAULT_CONFIG)

relate :: List Tag -> Tag -> List Float
export relate = (ts, t) => List.reduce((agg, u) => List.append(affinity(t, u), agg), [], ts)

relateTags :: List Tag -> Tag -> List Tag
export relateTags = (ts, t) => pipe(
  relate(ts),
  List.zip($, ts),
  List.filter(
    pipe(
      Tuple.fst,
      (z) => z > 0,
    ),
  ),
  map(Tuple.snd),
)(t)

relateManyTags :: List Tag -> List Tag -> List (List Tag)
export relateManyTags = (xs, ys) => map(relateTags(xs), ys)
