import type { MatchKind, Tagged } from "@/Tagged"

import { caseN2, report } from "Study"

import Tag from "@/Tag"
import {
  All,
  Any,
  Invert,
  Match,
  None,
  Tagged,
  all,
  any,
  kind,
  none,
  subject,
  tagged,
  tags,
  untagged,
} from "@/Tagged"



HARNESS = {
  STRINGS: [
    ["city", "San Francisco"],
    ["shop", "bakery", "Tartine"],
    ["pastry", "croissant"],
    ["pastry", "morning bun"],
    ["bread"],
    ["pastry"],
  ],
  TAGS: [
    Tag.create(["city", "San Francisco"]),
    Tag.create(["shop", "bakery", "Tartine"]),
    Tag.create(["pastry", "croissant"]),
    Tag.create(["pastry", "morning bun"]),
    Tag.create(["bread"]),
    Tag.create(["pastry"]),
  ],
  ENTITY: {
    name: "Tartine",
    location: "San Francisco",
    description: "Fantastic croissants and morning buns",
  },
}
ASSEMBLED = tagged(HARNESS.STRINGS, HARNESS.ENTITY)

tagMaker = (k, fn, name) => report(
  fn(HARNESS.STRINGS),
  name,
  [#[{ yo: "yes" }, Tagged(k, HARNESS.TAGS, { yo: "yes" })]],
)

tagMaker(Match, tagged, "tagged constructor")

tagMaker(Invert, untagged, "untagged constructor")

report(all, "all", [#[{ blah: "yes" }, Tagged(All, [], { blah: "yes" })]])
report(any, "any", [#[{ blah: "yes" }, Tagged(Any, [], { blah: "yes" })]])
report(none, "none", [#[{ blah: "yes" }, Tagged(None, [], { blah: "yes" })]])

report(kind, "kind", [#[ASSEMBLED, Match]])
report(tags, "tags", [#[ASSEMBLED, HARNESS.TAGS]])
report(subject, "subject", [#[ASSEMBLED, HARNESS.ENTITY]])
