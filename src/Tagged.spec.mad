import type { MatchKind, Tagged } from "@/Tagged"

import { caseN2, report } from "Study"

import Tag from "@/Tag"
import {
  All,
  Any,
  Invert,
  Match,
  None,
  Tagged,
  all,
  any,
  kind,
  none,
  subject,
  tagged,
  tags,
  untagged,
} from "@/Tagged"



RAW_TAGS = [
  ["city", "San Francisco"],
  ["shop", "bakery", "Tartine"],
  ["pastry", "croissant"],
  ["pastry", "morning bun"],
  ["bread"],
  ["pastry"],
]

TARTINE_TAGS = [
  Tag.create(["city", "San Francisco"]),
  Tag.create(["shop", "bakery", "Tartine"]),
  Tag.create(["pastry", "croissant"]),
  Tag.create(["pastry", "morning bun"]),
  Tag.create(["bread"]),
  Tag.create(["pastry"]),
]

HARNESS = {
  tartine: tagged(
    RAW_TAGS,
    {
      name: "Tartine",
      location: "San Francisco",
      description: "Fantastic croissants and morning buns",
    },
  ),
}

tagMaker = (k, fn, name) => report(
  fn(RAW_TAGS),
  name,
  [#[{ yo: "yes" }, Tagged(k, TARTINE_TAGS, { yo: "yes" })]],
)

tagMaker(Match, tagged, "tagged constructor")

tagMaker(Invert, untagged, "untagged constructor")

report(all, "all", [#[{ blah: "yes" }, Tagged(All, [], { blah: "yes" })]])
report(any, "any", [#[{ blah: "yes" }, Tagged(Any, [], { blah: "yes" })]])
report(none, "none", [#[{ blah: "yes" }, Tagged(None, [], { blah: "yes" })]])

report(kind, "kind", [#[HARNESS.tartine, Match]])
report(tags, "tags", [#[HARNESS.tartine, TARTINE_TAGS]])
report(
  subject,
  "subject",
  [
    #[
      HARNESS.tartine,
      {
        name: "Tartine",
        location: "San Francisco",
        description: "Fantastic croissants and morning buns",
      },
    ],
  ],
)
